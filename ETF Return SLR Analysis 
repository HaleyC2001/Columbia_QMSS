{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "31429a12-e182-4b82-b4ee-2f6de5ee4a55",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd  \n",
    "import numpy as np  \n",
    "import matplotlib.pyplot as plt  \n",
    "import openpyxl\n",
    "from datetime import date, time, datetime, timedelta\n",
    "from plotnine import *\n",
    "from plotnine import ggplot\n",
    "from plotnine.data import mpg\n",
    "from IPython.display import display\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0ab26bd4-5913-4282-bc6c-df539e89654b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        Date        Open        High         Low       Close   Adj Close  \\\n",
      "0  2020-01-01 00:00:00-05:00  323.540009  332.950012  320.359985  321.730011  298.283722   \n",
      "1  2020-02-01 00:00:00-05:00  323.350006  339.079987  285.540009  296.260010  274.669922   \n",
      "2  2020-03-01 00:00:00-05:00  298.209991  313.839996  218.259995  257.750000  238.966309   \n",
      "3  2020-04-01 00:00:00-04:00  247.979996  294.880005  243.899994  290.480011  270.894745   \n",
      "4  2020-05-01 00:00:00-04:00  285.309998  306.839996  272.989990  304.320007  283.801605   \n",
      "5  2020-06-01 00:00:00-04:00  303.619995  323.410004  296.739990  308.359985  287.569122   \n",
      "6  2020-07-01 00:00:00-04:00  309.570007  327.230011  309.070007  326.519989  305.844788   \n",
      "7  2020-08-01 00:00:00-04:00  328.320007  351.299988  327.730011  349.309998  327.191742   \n",
      "8  2020-09-01 00:00:00-04:00  350.209991  358.750000  319.799988  334.890015  313.684814   \n",
      "9  2020-10-01 00:00:00-04:00  337.690002  354.019989  322.600006  326.540009  307.087830   \n",
      "\n",
      "       Volume  Dividends  Stock Splits  Capital Gains  \n",
      "0  1392003800      0.000           0.0            0.0  \n",
      "1  2110214900      0.000           0.0            0.0  \n",
      "2  5926017600      1.406           0.0            0.0  \n",
      "3  2819312300      0.000           0.0            0.0  \n",
      "4  1910460500      0.000           0.0            0.0  \n",
      "5  2358674500      1.366           0.0            0.0  \n",
      "6  1505145300      0.000           0.0            0.0  \n",
      "7  1045563300      0.000           0.0            0.0  \n",
      "8  1814712700      1.339           0.0            0.0  \n",
      "9  1629016100      0.000           0.0            0.0  \n",
      "                        Date        Open        High         Low       Close   Adj Close  \\\n",
      "0  2020-01-01 00:00:00-05:00   92.500000   98.830002   91.250000   95.330002   91.105087   \n",
      "1  2020-02-01 00:00:00-05:00   95.440002  102.940002   84.059998   88.370003   84.453552   \n",
      "2  2020-03-01 00:00:00-05:00   89.959999   94.660004   68.099998   80.370003   76.808098   \n",
      "3  2020-04-01 00:00:00-04:00   77.589996   92.139999   75.959999   91.410004   87.814987   \n",
      "4  2020-05-01 00:00:00-04:00   89.400002   98.519997   88.080002   97.970001   94.116997   \n",
      "5  2020-06-01 00:00:00-04:00   97.510002  105.830002   97.080002  104.489998  100.380554   \n",
      "6  2020-07-01 00:00:00-04:00  104.559998  110.470001  103.470001  110.430000  106.379326   \n",
      "7  2020-08-01 00:00:00-04:00  111.930000  124.349998  111.150002  123.550003  119.018089   \n",
      "8  2020-09-01 00:00:00-04:00  124.660004  127.720001  109.110001  116.699997  112.419334   \n",
      "9  2020-10-01 00:00:00-04:00  118.320000  124.269997  109.570000  110.860001  107.030098   \n",
      "\n",
      "      Volume  Dividends  Stock Splits  Capital Gains  \n",
      "0  213914200      0.000           0.0            0.0  \n",
      "1  305993600      0.000           0.0            0.0  \n",
      "2  782411700      0.371           0.0            0.0  \n",
      "3  311278900      0.000           0.0            0.0  \n",
      "4  237642600      0.000           0.0            0.0  \n",
      "5  262276100      0.281           0.0            0.0  \n",
      "6  211491100      0.000           0.0            0.0  \n",
      "7  164859400      0.000           0.0            0.0  \n",
      "8  335468900      0.247           0.0            0.0  \n",
      "9  199725600      0.000           0.0            0.0  \n"
     ]
    }
   ],
   "source": [
    "\n",
    "pd.set_option('display.max_columns', None)  # Show all columns\n",
    "pd.set_option('display.width', 100)        # Adjust width\n",
    "\n",
    "\n",
    "df1 = pd.read_csv('/Users/haleychen/Downloads/SPY_history.csv',header=0)\n",
    "print(df1.head(10))\n",
    "\n",
    "df2 = pd.read_csv('/Users/haleychen/Downloads/XLK_history.csv',header=0)\n",
    "print(df2.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67bf2a7f-6f9b-4c24-a4e2-23b9fc729981",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(61, 10)\n",
      "61\n"
     ]
    }
   ],
   "source": [
    "# print(df2.dtypes)\n",
    "# print(df1.tail(10))\n",
    "print (df1.shape)\n",
    "print(len(df1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fbc38b72-bb61-4a78-8928-07808b90fad1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#define return function \n",
    "\n",
    "def calc_return(dataframe):\n",
    "    R = []  \n",
    "    for i in range(1, len(dataframe)): #I want to just ignore the 1st row \n",
    "        prev_close = dataframe.iloc[i-1]['Close']  # Use the correct dataframe variable\n",
    "        if prev_close == 0:  # Check for division by zero\n",
    "            ret = None  # or set it to 0 if you prefer\n",
    "        else:\n",
    "            ret = ((dataframe.iloc[i]['Close'] + dataframe.iloc[i]['Dividends']) / prev_close) - 1\n",
    "        R.append(ret)\n",
    "\n",
    "    return R\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "22db349a-e6f5-4b93-8d8e-156504400250",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60\n"
     ]
    }
   ],
   "source": [
    "#calculate returns \n",
    "Rxlk=calc_return(df2)\n",
    "Rspy=calc_return(df1)\n",
    "print(len(Rspy))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df057d4c-4958-48f0-96eb-f8b5783afb7e",
   "metadata": {},
   "source": [
    "## Model data with SLR "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7acfb18e-df8b-427e-9096-b4fd64bf9843",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "42a39c3a-8f74-4f4f-8f17-5c515de9fb43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B0 (Intercept): 0.0029149169180923053\n",
      "B1 (Slope): 1.1214360119138058\n"
     ]
    }
   ],
   "source": [
    "# Let SPY be the proxy for the market portfolio. \n",
    "# Use the market model to esimate the beta for XLK \n",
    "\n",
    "y = Rxlk\n",
    "x = Rspy\n",
    "\n",
    "\n",
    "x = np.array(x).reshape(-1, 1)# Reshape x for sklearn (requires 2D array) #this step is still needed even though it is a SLR \n",
    "# also, 'list' object has no attribute 'reshape'\n",
    "\n",
    "\n",
    "model = LinearRegression()\n",
    "model.fit(x, y)\n",
    "\n",
    "# Get coefficients\n",
    "B0 = model.intercept_  # Intercept\n",
    "B1 = model.coef_[0]  # Slope\n",
    "\n",
    "print(f\"B0 (Intercept): {B0}\")\n",
    "print(f\"B1 (Slope): {B1}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0402a825-bbec-46cd-a2c2-99768e1fcf2d",
   "metadata": {},
   "source": [
    "### generating visuals "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "00c42447-cba4-4ca9-ae80-ef7a1045a3e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the SLR line\n",
    "gx = np.linspace(x.min(), x.max(), 100)  # gx is a new set of x values that span the range of your original x values, \n",
    "                                        #but they are not necessarily the actual x values from your data.\n",
    "yhat = B0 + B1 * gx  # The predicted values (SLR line)\n",
    "\n",
    "plt.scatter(x, y, color='blue',  s=5)\n",
    "plt.plot(gx, yhat, color='red', lw=2)\n",
    "\n",
    "# Labels and title\n",
    "plt.xlabel('SPY total return')\n",
    "plt.ylabel('XLK total return')\n",
    "plt.title('Beta='+str(round(B1,6)))\n",
    "\n",
    "# Show the plot\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56800571-b70c-4f31-897e-1a59dd46b1fe",
   "metadata": {},
   "source": [
    "## Testing if XLF is a high beta ETF "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bb6d6db-1a27-4733-a3c6-e4992fe54c55",
   "metadata": {},
   "source": [
    "### using bootstrap "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c8f9cb18-b5c0-4a28-aae6-3ef9c8253dfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# generating bootstrap samples \n",
    "\n",
    "n_bootstrap_samples = 5000\n",
    "\n",
    "\n",
    "bootstrapped_b1 = [] # Store bootstrapped beta1 values\n",
    "\n",
    "# Perform bootstrapping\n",
    "for i in range(n_bootstrap_samples):    # Store bootstrapped beta1 values\n",
    "    \n",
    "    boot_df = pd.DataFrame({'x': x.flatten(), 'y': y}) # we need to sample both from x and y \n",
    "    boot_sample = boot_df.sample(frac=1.0, replace=True, random_state=i)\n",
    "    \n",
    "    # Get bootstrap samples of x and y\n",
    "    x_boot = boot_sample['x'].values.reshape(-1, 1) # reshaple for the regression later \n",
    "    y_boot = boot_sample['y'].values\n",
    "    \n",
    "    # Fit the linear regression model to the bootstrap sample\n",
    "    model = LinearRegression()\n",
    "    model.fit(x_boot, y_boot)\n",
    "    \n",
    "    # Store the beta1 coefficient (slope) from this bootstrap sample\n",
    "    bootstrapped_b1.append(model.coef_[0])\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "44f3c85f-bace-4c8f-a1e4-fd1a67980231",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "The reason for converting the bootstrapped beta estimates into a NumPy array (np.array) is primarily for efficiency \n",
    "and functionality when performing calculations such as calculating the mean and standard deviation.\n",
    "'''\n",
    "\n",
    "#Convert the list of bootstrapped beta1 values into a numpy array\n",
    "bootstrapped_b1 = np.array(bootstrapped_b1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "964f5520-5119-4d4f-8fe3-05234b08475d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate mean and standard deviation (standard error) of the bootstrapped beta1 estimates\n",
    "mean_b1 = np.mean(bootstrapped_b1)\n",
    "std_b1 = np.std(bootstrapped_b1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5d29e2d8-461b-402a-96cd-9e0c3312bfab",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the histogram of the bootstrapped beta1 estimates\n",
    "plt.hist(bootstrapped_b1, bins=13, edgecolor='black', alpha=0.7)\n",
    "# plt.axvline(mean_b1, color='red', linestyle='dashed', linewidth=2, label=f'E(b-hat) = {mean_b1:.4f}')\n",
    "# plt.axvline(mean_b1 + std_b1, color='green', linestyle='dashed', linewidth=2, label=f'SE(b-hat) = {std_b1:.4f}')\n",
    "# plt.axvline(mean_b1 - std_b1, color='green', linestyle='dashed', linewidth=2)\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Bootstrapped Beta Estimates (b-hat)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('mean='+str(round(mean_b1,4))+\", se= \"+str(round(std_b1,4)))\n",
    "plt.legend()\n",
    "\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e674c98-8884-4c4f-8b60-4ff29edd53de",
   "metadata": {},
   "source": [
    "### Evaluate P-value "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8f3addee-bc28-4311-ae0f-a586322d67f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P-value for H0: β1 = 1 vs H1: β1 > 1: 0.034813240255218925\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import t\n",
    "\n",
    "\n",
    "x_with_const = sm.add_constant(x)  # Add intercept\n",
    "ols_model = sm.OLS(y,x_with_const ).fit()  # Fit OLS regression\n",
    "\n",
    "# Extract parameters\n",
    "beta_hat = ols_model.params[1]  # Estimated slope (β1)\n",
    "beta_se = ols_model.bse[1]  # Standard error of β1\n",
    "t_stat = (beta_hat - 1) / beta_se  # Test statistic for β1 = 1\n",
    "p_value = 1 - t.cdf(t_stat, df=ols_model.df_resid)  # One-tailed test\n",
    "\n",
    "print(f\"P-value for H0: β1 = 1 vs H1: β1 > 1: {p_value}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dcc024b-fd1c-43bd-ba6b-8a4ddc991a56",
   "metadata": {},
   "source": [
    "### Estimate the prediction error "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "85e0d6f9-960c-4123-8301-f7bbbfa78598",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimated MSE: 0.0007143\n",
      "RMSE: 0.0267258\n",
      "Relative RMSE (% of avg XLK return size): 48.41%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "# Predict on the same dataset (in-sample error)\n",
    "y_pred = model.predict(x)\n",
    "\n",
    "# Compute MSE and RMSE\n",
    "mse = mean_squared_error(y, y_pred)  \n",
    "rmse = np.sqrt(mse)  \n",
    "\n",
    "# Compute the average absolute return size of XLK\n",
    "avg_abs_return_xlk = np.mean(np.abs(y))  \n",
    "\n",
    "# Compute RMSE as a percentage of average return size\n",
    "rmse_relative = (rmse / avg_abs_return_xlk) * 100\n",
    "\n",
    "# Print results\n",
    "print(f\"Estimated MSE: {mse:.7f}\")\n",
    "print(f\"RMSE: {rmse:.7f}\")\n",
    "print(f\"Relative RMSE (% of avg XLK return size): {rmse_relative:.2f}%\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
